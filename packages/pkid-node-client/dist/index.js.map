{"version":3,"file":"index.js","sources":["../src/util.ts","../src/index.ts"],"sourcesContent":["import {\n  crypto_box_seal,\n  crypto_box_seal_open,\n  crypto_sign,\n  crypto_sign_ed25519_pk_to_curve25519,\n  crypto_sign_ed25519_sk_to_curve25519,\n  crypto_sign_keypair,\n  ready,\n} from 'libsodium-wrappers';\n\nimport {\n  decodeBase64,\n  decodeUTF8,\n  encodeBase64,\n  encodeUTF8,\n} from 'tweetnacl-util';\n\nexport const encrypt = async <T>(json: T, publicKey: Uint8Array) => {\n  await ready;\n  const message = decodeUTF8(JSON.stringify(json));\n\n  publicKey = crypto_sign_ed25519_pk_to_curve25519(publicKey);\n  const encryptedMessage = crypto_box_seal(message, publicKey);\n\n  return encodeBase64(encryptedMessage);\n};\n\nexport const decrypt = async (\n  ciphertext: string,\n  publicKey: Uint8Array,\n  privateKey: Uint8Array,\n) => {\n  await ready;\n\n  const decodedCiphertext: Uint8Array = decodeBase64(ciphertext);\n\n  const curvePublicKey: Uint8Array =\n    crypto_sign_ed25519_pk_to_curve25519(publicKey);\n  const curvePrivateKey: Uint8Array =\n    crypto_sign_ed25519_sk_to_curve25519(privateKey);\n\n  const decrypted = crypto_box_seal_open(\n    decodedCiphertext,\n    curvePublicKey,\n    curvePrivateKey,\n  );\n\n  if (!decrypted) {\n    return null;\n  }\n\n  return encodeUTF8(decrypted);\n};\n\nexport const sign = (message: string | Uint8Array, privateKey: Uint8Array) => {\n  return crypto_sign(message, privateKey);\n};\n\nexport const signEncode = <T>(payload: T, privateKey: Uint8Array) => {\n  const message = decodeUTF8(JSON.stringify(payload));\n\n  return encodeBase64(sign(message, privateKey));\n};\n\nexport const encodeHex = (byteArray) =>\n  Array.from(byteArray, (byte: any) =>\n    ('0' + (byte & 0xff).toString(16)).slice(-2),\n  ).join('');\n\nexport const generateKeypair = async () => {\n  await ready;\n  return crypto_sign_keypair();\n};\n","import axios from 'axios';\nimport { sign } from 'tweetnacl';\nimport { encodeUTF8, decodeBase64 } from 'tweetnacl-util';\nimport { decrypt, encodeHex, encrypt, signEncode } from './util';\nimport { KeyPair } from 'libsodium-wrappers';\n\nconst ApiVersion = `v1`;\nconst dataVersion = 1;\n\nexport default class Pkid {\n  constructor(private readonly nodeUrl: string, private readonly keyPair: KeyPair) {}\n\n  async getDoc<T>(signPk: Uint8Array, requestKey: string) {\n    let res;\n    try {\n      res = await axios({\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        url: `${this.nodeUrl}/v1/documents/${encodeHex(signPk)}/${requestKey}`,\n      });\n    } catch (e) {\n      let status = 'no_status';\n      if (e.response && e.response.status) {\n        status = e.response.status;\n      }\n      return {\n        status: status,\n        error: e.message,\n      };\n    }\n\n    const verified = sign.open(decodeBase64(res.data.data), signPk);\n    if (!verified) {\n      return {\n        error: 'could not verify data',\n        verified: false,\n      };\n    }\n\n    const data = JSON.parse(encodeUTF8(verified));\n\n    if (!data.is_encrypted) {\n      return {\n        success: true,\n        data: data.payload,\n        verified: true,\n        data_version: data.data_version,\n      };\n    }\n\n    let decryptedData;\n    try {\n      decryptedData = await decrypt(data.payload, this.keyPair.publicKey, this.keyPair.privateKey);\n    } catch (e) {}\n    if (!decryptedData) {\n      return {\n        error: 'could not decrypt data',\n        verified: true,\n        decrypted: false,\n        data_version: data.data_version,\n      };\n    }\n\n    return {\n      success: true,\n      data: JSON.parse(decryptedData),\n      verified: true,\n      decrypted: true,\n      data_version: data.data_version,\n    };\n  }\n\n  async setDoc<T>(requestKey: string, payload: T, willEncrypt: boolean = false, publicKey?: Uint8Array) {\n    const header = {\n      intent: 'pkid.store',\n      timestamp: new Date().getTime(),\n    };\n\n    const encryptionPublicKey = publicKey ? publicKey : this.keyPair.publicKey;\n\n    const handledPayload = willEncrypt ? await encrypt<T>(payload, encryptionPublicKey) : payload;\n\n    const payloadContainer = {\n      is_encrypted: Boolean(willEncrypt),\n      payload: handledPayload,\n      data_version: dataVersion,\n    };\n\n    try {\n      return await axios({\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: signEncode(header, this.keyPair.privateKey),\n        },\n        data: JSON.stringify(signEncode(payloadContainer, this.keyPair.privateKey)),\n        url: `${this.nodeUrl}/${ApiVersion}/documents/${encodeHex(this.keyPair.publicKey)}/${requestKey}`,\n      });\n    } catch (e) {\n      return e;\n    }\n  }\n\n  async getNamespace<T>(requestNamespace: string, namespacePubKey: Uint8Array) {\n    let res;\n    try {\n      res = await axios({\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        url: `${this.nodeUrl}/v1/name-service/${requestNamespace}`,\n      });\n    } catch (e) {\n      let status = 'no_status';\n      if (e.response && e.response.status) {\n        status = e.response.status;\n      }\n      return {\n        status: status,\n        error: e.message,\n      };\n    }\n\n    const verified = sign.open(decodeBase64(res.data.data), namespacePubKey);\n    if (!verified) {\n      return {\n        error: 'could not verify data',\n        verified: false,\n      };\n    }\n\n    const data = JSON.parse(encodeUTF8(verified)) as T;\n\n    return {\n      success: true,\n      verified: true,\n      data,\n    };\n  }\n\n  async setNamespace(requestNamespace: string, signedPayload: string) {\n    //const header = {\n    //  intent: 'pkid.store',\n    //  timestamp: new Date().getTime(),\n    //};\n\n    const payloadContainer = {\n      payload: signedPayload,\n      data_version: dataVersion,\n    };\n\n    try {\n      return await axios({\n        method: 'PUT',\n        data: payloadContainer,\n        url: `${this.nodeUrl}/${ApiVersion}/name-service/${requestNamespace}`,\n      });\n    } catch (e) {\n      return e;\n    }\n  }\n}\n"],"names":["ready","decodeUTF8","crypto_sign_ed25519_pk_to_curve25519","crypto_box_seal","encodeBase64","decodeBase64","crypto_sign_ed25519_sk_to_curve25519","crypto_box_seal_open","encodeUTF8","crypto_sign","axios","sign"],"mappings":"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"}